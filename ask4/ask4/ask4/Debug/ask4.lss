
ask4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00802800  00802800  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bcc  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002237  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036f  00000000  00000000  00005173  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000054e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001425  00000000  00000000  00005580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  000069a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00006ad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_7>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
// LED 1 = rotation movement
int point = 0;

int main(void)
{
	PORTD.DIR |= PIN0_bm | PIN1_bm;										// Set PIN 0,1 as output
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	80 83       	st	Z, r24
	PORTD.OUT |= PIN0_bm | PIN1_bm;										// Initialize both LEDs OFF
  c2:	84 81       	ldd	r24, Z+4	; 0x04
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	84 83       	std	Z+4, r24	; 0x04

	
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;			// Configure button on PIN 6 PORTF	
  c8:	e0 ea       	ldi	r30, 0xA0	; 160
  ca:	f4 e0       	ldi	r31, 0x04	; 4
  cc:	86 89       	ldd	r24, Z+22	; 0x16
  ce:	8a 60       	ori	r24, 0x0A	; 10
  d0:	86 8b       	std	Z+22, r24	; 0x16
	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;								// Enable TCA Split Mode
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	fa e0       	ldi	r31, 0x0A	; 10
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV1024_gc;						// Configure clock source, not enabled
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 83       	st	Z, r24
	sei();																// Enable interrupts globally
  de:	78 94       	sei
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x28>

000000e2 <__vector_29>:

	cli();																// Disable interrupts (will never be reached)
}

// Button Press ISR
ISR(PORTF_PORT_vect) {
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	// Clear the interrupt flag
	int y = PORTF.INTFLAGS;
  fe:	e0 ea       	ldi	r30, 0xA0	; 160
 100:	f4 e0       	ldi	r31, 0x04	; 4
 102:	81 85       	ldd	r24, Z+9	; 0x09
	PORTF.INTFLAGS = y;
 104:	81 87       	std	Z+9, r24	; 0x09

	TCA0.SPLIT.CTRLA &= ~TCA_SPLIT_ENABLE_bm;							// Disable timer
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	fa e0       	ldi	r31, 0x0A	; 10
 10a:	80 81       	ld	r24, Z
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	80 83       	st	Z, r24
	TCA0.SPLIT.CTRLB &= ~(TCA_SPLIT_LCMP0EN_bm | TCA_SPLIT_HCMP0EN_bm);	// Disable PWM outputs
 110:	81 81       	ldd	r24, Z+1	; 0x01
 112:	8e 7e       	andi	r24, 0xEE	; 238
 114:	81 83       	std	Z+1, r24	; 0x01
	// LPER + 1 = ftimer / fpwm_ss;
	// LPER + 1 = 19.531 * 1
	// LPER = 18.531 ~= 19

	// Configure PWM periods and duty cycles
	if (point == 0) {
 116:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 11a:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	b9 f4       	brne	.+46     	; 0x150 <__EEPROM_REGION_LENGTH__+0x50>
		TCA0.SPLIT.HPER = 40;											// High period = 38
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	87 a3       	std	Z+39, r24	; 0x27
		TCA0.SPLIT.HCMP0 = 15;											// 40% duty cycle ( 0.4 * 38 = 15.2)
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	81 a7       	std	Z+41, r24	; 0x29

		// Slow rotation movement (PORTD1)
		TCA0.SPLIT.LPER = 20;											// Low period = 19
 12a:	84 e1       	ldi	r24, 0x14	; 20
 12c:	86 a3       	std	Z+38, r24	; 0x26
		TCA0.SPLIT.LCMP0 = 11;											// 60% duty cycle (0.6 * 19 = 11.4)
 12e:	8b e0       	ldi	r24, 0x0B	; 11
 130:	80 a7       	std	Z+40, r24	; 0x28
		
		TCA0.SPLIT.LCNT = TCA0.SPLIT.LPER;								// Restart count
 132:	86 a1       	ldd	r24, Z+38	; 0x26
 134:	80 a3       	std	Z+32, r24	; 0x20
		TCA0.SPLIT.HCNT = TCA0.SPLIT.HPER;								// Restart count
 136:	87 a1       	ldd	r24, Z+39	; 0x27
 138:	81 a3       	std	Z+33, r24	; 0x21
		
		// Toggle LEDs
		PORTD.OUT ^= PIN0_bm;											// Toggle LED on PORTD0
 13a:	e0 e6       	ldi	r30, 0x60	; 96
 13c:	f4 e0       	ldi	r31, 0x04	; 4
 13e:	94 81       	ldd	r25, Z+4	; 0x04
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	89 27       	eor	r24, r25
 144:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUT ^= PIN1_bm;											// Toggle LED on PORTD1
 146:	94 81       	ldd	r25, Z+4	; 0x04
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	89 27       	eor	r24, r25
 14c:	84 83       	std	Z+4, r24	; 0x04
 14e:	13 c0       	rjmp	.+38     	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
	}
	else if (point == 1) {
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	59 f4       	brne	.+22     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
		// Change period / duty cycle
		// LPER' = LPER / 2 = 9.5 ~= 10
		TCA0.SPLIT.LPER = 10;											// Low period = 10
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	fa e0       	ldi	r31, 0x0A	; 10
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	86 a3       	std	Z+38, r24	; 0x26
		TCA0.SPLIT.LCMP0 = 5;											// 50% duty cycle
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	80 a7       	std	Z+40, r24	; 0x28

		TCA0.SPLIT.LCNT = TCA0.SPLIT.LPER;								// Restart count
 160:	86 a1       	ldd	r24, Z+38	; 0x26
 162:	80 a3       	std	Z+32, r24	; 0x20
		TCA0.SPLIT.HCNT = TCA0.SPLIT.HPER;								// Restart count
 164:	87 a1       	ldd	r24, Z+39	; 0x27
 166:	81 a3       	std	Z+33, r24	; 0x21
 168:	06 c0       	rjmp	.+12     	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
	}
	else {
		// Turn off LEDs if point == 2
		PORTD.OUT |= PIN0_bm | PIN1_bm;									// Turn off both LEDs
 16a:	e0 e6       	ldi	r30, 0x60	; 96
 16c:	f4 e0       	ldi	r31, 0x04	; 4
 16e:	84 81       	ldd	r24, Z+4	; 0x04
 170:	83 60       	ori	r24, 0x03	; 3
 172:	84 83       	std	Z+4, r24	; 0x04
		goto exit;
 174:	09 c0       	rjmp	.+18     	; 0x188 <__EEPROM_REGION_LENGTH__+0x88>
	}

	TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm | TCA_SPLIT_LUNF_bm;		// Clear any interrupts
 176:	e0 e0       	ldi	r30, 0x00	; 0
 178:	fa e0       	ldi	r31, 0x0A	; 10
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	83 87       	std	Z+11, r24	; 0x0b
	// TCA0.SPLIT.CTRLB = TCA_SPLIT_LCMP0_bm;							// Enable PWM output compares (both low and high)
	TCA0.SPLIT.INTCTRL = /*TCA_SPLIT_HUNF_bm |*/ TCA_SPLIT_LUNF_bm /*| TCA_SPLIT_LCMP0_bm */;	// Enable interrupts for underflow
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SPLIT.CTRLA |= TCA_SPLIT_ENABLE_bm;							// Enable the timer
 182:	80 81       	ld	r24, Z
 184:	81 60       	ori	r24, 0x01	; 1
 186:	80 83       	st	Z, r24

	exit:
	point++;
 188:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 18c:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
	point %= 3;															// Loop through 0, 1, 2
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 04 01 	call	0x208	; 0x208 <__divmodhi4>
 19a:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 19e:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_7>:

// Low counter underflow ISR
ISR(TCA0_LUNF_vect) {
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	ef 93       	push	r30
 1ce:	ff 93       	push	r31
	PORTD.OUT ^= PIN0_bm;												// Toggle PORTD0 (LED0)
 1d0:	e0 e6       	ldi	r30, 0x60	; 96
 1d2:	f4 e0       	ldi	r31, 0x04	; 4
 1d4:	94 81       	ldd	r25, Z+4	; 0x04
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	89 27       	eor	r24, r25
 1da:	84 83       	std	Z+4, r24	; 0x04
	
	if(TCA0.SPLIT.INTFLAGS & TCA_SPLIT_HUNF_bm ) {
 1dc:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
 1e0:	81 ff       	sbrs	r24, 1
 1e2:	06 c0       	rjmp	.+12     	; 0x1f0 <__vector_7+0x32>
		PORTD.OUT ^= PIN1_bm;											// Toggle PORTD1 (LED1)
 1e4:	84 81       	ldd	r24, Z+4	; 0x04
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	89 27       	eor	r24, r25
 1ea:	84 83       	std	Z+4, r24	; 0x04
		TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm; 		// Clear the interrupt flag for high counter underflow
 1ec:	90 93 0b 0a 	sts	0x0A0B, r25	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>

	}
		
	TCA0.SPLIT.INTFLAGS = TCA_SPLIT_LUNF_bm; 		// Clear the interrupt flag for low counter underflow
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__divmodhi4>:
 208:	97 fb       	bst	r25, 7
 20a:	07 2e       	mov	r0, r23
 20c:	16 f4       	brtc	.+4      	; 0x212 <__divmodhi4+0xa>
 20e:	00 94       	com	r0
 210:	07 d0       	rcall	.+14     	; 0x220 <__divmodhi4_neg1>
 212:	77 fd       	sbrc	r23, 7
 214:	09 d0       	rcall	.+18     	; 0x228 <__divmodhi4_neg2>
 216:	0e 94 18 01 	call	0x230	; 0x230 <__udivmodhi4>
 21a:	07 fc       	sbrc	r0, 7
 21c:	05 d0       	rcall	.+10     	; 0x228 <__divmodhi4_neg2>
 21e:	3e f4       	brtc	.+14     	; 0x22e <__divmodhi4_exit>

00000220 <__divmodhi4_neg1>:
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__divmodhi4_neg2>:
 228:	70 95       	com	r23
 22a:	61 95       	neg	r22
 22c:	7f 4f       	sbci	r23, 0xFF	; 255

0000022e <__divmodhi4_exit>:
 22e:	08 95       	ret

00000230 <__udivmodhi4>:
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	51 e1       	ldi	r21, 0x11	; 17
 236:	07 c0       	rjmp	.+14     	; 0x246 <__udivmodhi4_ep>

00000238 <__udivmodhi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	a6 17       	cp	r26, r22
 23e:	b7 07       	cpc	r27, r23
 240:	10 f0       	brcs	.+4      	; 0x246 <__udivmodhi4_ep>
 242:	a6 1b       	sub	r26, r22
 244:	b7 0b       	sbc	r27, r23

00000246 <__udivmodhi4_ep>:
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	5a 95       	dec	r21
 24c:	a9 f7       	brne	.-22     	; 0x238 <__udivmodhi4_loop>
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	bc 01       	movw	r22, r24
 254:	cd 01       	movw	r24, r26
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
