
askisi1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00802800  00802800  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025f6  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002271  00000000  00000000  0000290e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000380  00000000  00000000  00004b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00004f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011c9  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  00006121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000620f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a6 30       	cpi	r26, 0x06	; 6
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

int main() {
	PORTD.DIR |= 0b00000111; //BITS 0-2 OUTPUT (0 = ERR)
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	PORTD.OUT |= 0b00000111; //LED's are off
  c2:	84 81       	ldd	r24, Z+4	; 0x04
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	84 83       	std	Z+4, r24	; 0x04
	
	// pullup enable and Interrupt enabled with sense on rising edge (button release)
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
  c8:	e0 ea       	ldi	r30, 0xA0	; 160
  ca:	f4 e0       	ldi	r31, 0x04	; 4
  cc:	85 89       	ldd	r24, Z+21	; 0x15
  ce:	8a 60       	ori	r24, 0x0A	; 10
  d0:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
  d2:	86 89       	ldd	r24, Z+22	; 0x16
  d4:	8a 60       	ori	r24, 0x0A	; 10
  d6:	86 8b       	std	Z+22, r24	; 0x16
	sei(); //enable interrupts
  d8:	78 94       	sei
	
	while (1) {
		printf("."); // print statement for easy debugging (breakpoint at each cycle)
  da:	8e e2       	ldi	r24, 0x2E	; 46
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 c1 00 	call	0x182	; 0x182 <putchar>
  e2:	fb cf       	rjmp	.-10     	; 0xda <main+0x22>

000000e4 <__vector_29>:
	}
}

ISR(PORTF_PORT_vect){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	int y = PORTF.INTFLAGS;
  f8:	20 91 a9 04 	lds	r18, 0x04A9	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
  fc:	82 2f       	mov	r24, r18
  fe:	90 e0       	ldi	r25, 0x00	; 0
	
	// Both buttons pressed (error)
	if(y == 0b01100000) {
 100:	80 36       	cpi	r24, 0x60	; 96
 102:	91 05       	cpc	r25, r1
 104:	71 f4       	brne	.+28     	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
		PORTD.OUTCLR = 0b00000001;
 106:	e0 e6       	ldi	r30, 0x60	; 96
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	83 ec       	ldi	r24, 0xC3	; 195
 110:	99 e0       	ldi	r25, 0x09	; 9
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 118:	00 00       	nop
		_delay_ms(10);
		PORTD.OUT |= 0b00000001;
 11a:	84 81       	ldd	r24, Z+4	; 0x04
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	84 83       	std	Z+4, r24	; 0x04
 120:	24 c0       	rjmp	.+72     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>

	}
	// Down button (PF5)
	else if (y == 0b00100000) {
 122:	80 32       	cpi	r24, 0x20	; 32
 124:	91 05       	cpc	r25, r1
 126:	89 f4       	brne	.+34     	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
		// if not at ground floor
		if (PORTD.OUT != 0b00000111) {
 128:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
 12c:	87 30       	cpi	r24, 0x07	; 7
 12e:	e9 f0       	breq	.+58     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
			// ground floor ? LED2 OFF : LED1 && LED2 OFF
			PORTD.OUT |= (PORTD.OUT == 0b00000001)? 0b00000100 : 0b00000110;
 130:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	11 f4       	brne	.+4      	; 0x13c <__EEPROM_REGION_LENGTH__+0x3c>
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	01 c0       	rjmp	.+2      	; 0x13e <__EEPROM_REGION_LENGTH__+0x3e>
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	e0 e6       	ldi	r30, 0x60	; 96
 140:	f4 e0       	ldi	r31, 0x04	; 4
 142:	94 81       	ldd	r25, Z+4	; 0x04
 144:	89 2b       	or	r24, r25
 146:	84 83       	std	Z+4, r24	; 0x04
 148:	10 c0       	rjmp	.+32     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
		}
	}
	// Up button (PF6)
	else if (y == 0b01000000) {
 14a:	80 34       	cpi	r24, 0x40	; 64
 14c:	91 05       	cpc	r25, r1
 14e:	69 f4       	brne	.+26     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
		// if not at 2nd floor
		if (PORTD.OUT != 0b00000001) {
 150:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	49 f0       	breq	.+18     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
			// 2nd floor ? LED1 ON : LED1 && LED2 ON
			PORTD.OUTCLR = (PORTD.OUT == 0b00000111)? 0b00000010 : 0b00000110;
 158:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
 15c:	87 30       	cpi	r24, 0x07	; 7
 15e:	11 f4       	brne	.+4      	; 0x164 <__EEPROM_REGION_LENGTH__+0x64>
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	01 c0       	rjmp	.+2      	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
		}
	}

	PORTF.INTFLAGS = y; //clear the interrupt flag
 16a:	20 93 a9 04 	sts	0x04A9, r18	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7f44a9>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <putchar>:
 182:	60 91 02 28 	lds	r22, 0x2802	; 0x802802 <__DATA_REGION_ORIGIN__+0x2>
 186:	70 91 03 28 	lds	r23, 0x2803	; 0x802803 <__DATA_REGION_ORIGIN__+0x3>
 18a:	0e 94 c8 00 	call	0x190	; 0x190 <fputc>
 18e:	08 95       	ret

00000190 <fputc>:
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	fb 01       	movw	r30, r22
 19a:	23 81       	ldd	r18, Z+3	; 0x03
 19c:	21 fd       	sbrc	r18, 1
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <fputc+0x16>
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	2c c0       	rjmp	.+88     	; 0x1fe <fputc+0x6e>
 1a6:	22 ff       	sbrs	r18, 2
 1a8:	16 c0       	rjmp	.+44     	; 0x1d6 <fputc+0x46>
 1aa:	46 81       	ldd	r20, Z+6	; 0x06
 1ac:	57 81       	ldd	r21, Z+7	; 0x07
 1ae:	24 81       	ldd	r18, Z+4	; 0x04
 1b0:	35 81       	ldd	r19, Z+5	; 0x05
 1b2:	42 17       	cp	r20, r18
 1b4:	53 07       	cpc	r21, r19
 1b6:	44 f4       	brge	.+16     	; 0x1c8 <fputc+0x38>
 1b8:	a0 81       	ld	r26, Z
 1ba:	b1 81       	ldd	r27, Z+1	; 0x01
 1bc:	9d 01       	movw	r18, r26
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	20 83       	st	Z, r18
 1c4:	31 83       	std	Z+1, r19	; 0x01
 1c6:	8c 93       	st	X, r24
 1c8:	26 81       	ldd	r18, Z+6	; 0x06
 1ca:	37 81       	ldd	r19, Z+7	; 0x07
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	26 83       	std	Z+6, r18	; 0x06
 1d2:	37 83       	std	Z+7, r19	; 0x07
 1d4:	14 c0       	rjmp	.+40     	; 0x1fe <fputc+0x6e>
 1d6:	8b 01       	movw	r16, r22
 1d8:	ec 01       	movw	r28, r24
 1da:	fb 01       	movw	r30, r22
 1dc:	00 84       	ldd	r0, Z+8	; 0x08
 1de:	f1 85       	ldd	r31, Z+9	; 0x09
 1e0:	e0 2d       	mov	r30, r0
 1e2:	09 95       	icall
 1e4:	89 2b       	or	r24, r25
 1e6:	e1 f6       	brne	.-72     	; 0x1a0 <fputc+0x10>
 1e8:	d8 01       	movw	r26, r16
 1ea:	16 96       	adiw	r26, 0x06	; 6
 1ec:	8d 91       	ld	r24, X+
 1ee:	9c 91       	ld	r25, X
 1f0:	17 97       	sbiw	r26, 0x07	; 7
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	16 96       	adiw	r26, 0x06	; 6
 1f6:	8d 93       	st	X+, r24
 1f8:	9c 93       	st	X, r25
 1fa:	17 97       	sbiw	r26, 0x07	; 7
 1fc:	ce 01       	movw	r24, r28
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
