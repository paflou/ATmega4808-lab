
ask3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00802800  00802800  00000566  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f1d  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022ab  00000000  00000000  0000354d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00005cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001696  00000000  00000000  00005e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  000074f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000077be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_7>
  20:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_8>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_22>
  5c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_23>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	ae 30       	cpi	r26, 0x0E	; 14
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  b0:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <turn_left>:
volatile int current_dir = 0;		// 0=north, 1=west, 2=south, 3=east
volatile int started = 0;			// Flag to check if movement has begun
volatile int returning = 0;

void turn_left() {
	PORTD.OUT = 0b00000011;
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
	current_dir = (current_dir + 1) % 4;			// Cycle: n ? w ? s ? e ? n
  be:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <current_dir>
  c2:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <current_dir+0x1>
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	83 70       	andi	r24, 0x03	; 3
  ca:	90 78       	andi	r25, 0x80	; 128
  cc:	99 23       	and	r25, r25
  ce:	24 f4       	brge	.+8      	; 0xd8 <turn_left+0x20>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	8c 6f       	ori	r24, 0xFC	; 252
  d4:	9f 6f       	ori	r25, 0xFF	; 255
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <current_dir>
  dc:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <current_dir+0x1>
  e0:	08 95       	ret

000000e2 <turn_right>:
}

void turn_right() {
	PORTD.OUT = 0b00000110;
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
	current_dir = (current_dir - 1 + 4) % 4;		// Cycle: n ? e ? s ? w ? n
  e8:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <current_dir>
  ec:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <current_dir+0x1>
  f0:	03 96       	adiw	r24, 0x03	; 3
  f2:	83 70       	andi	r24, 0x03	; 3
  f4:	90 78       	andi	r25, 0x80	; 128
  f6:	99 23       	and	r25, r25
  f8:	24 f4       	brge	.+8      	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	8c 6f       	ori	r24, 0xFC	; 252
  fe:	9f 6f       	ori	r25, 0xFF	; 255
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <current_dir>
 106:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <current_dir+0x1>
 10a:	08 95       	ret

0000010c <main>:
}

int main() {
	PORTD.DIR |= 0b00000111;					// PIN 0-2 is output
 10c:	e0 e6       	ldi	r30, 0x60	; 96
 10e:	f4 e0       	ldi	r31, 0x04	; 4
 110:	80 81       	ld	r24, Z
 112:	87 60       	ori	r24, 0x07	; 7
 114:	80 83       	st	Z, r24
	

	PORTD.OUT |= 0b00000111;					// init LED (all off)
 116:	84 81       	ldd	r24, Z+4	; 0x04
 118:	87 60       	ori	r24, 0x07	; 7
 11a:	84 83       	std	Z+4, r24	; 0x04
	
	// pullup enable and Interrupt enabled with sense on rising edge (button release)
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
 11c:	e0 ea       	ldi	r30, 0xA0	; 160
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	85 89       	ldd	r24, Z+21	; 0x15
 122:	8a 60       	ori	r24, 0x0A	; 10
 124:	85 8b       	std	Z+21, r24	; 0x15
	
	// split timer with prescaler 1024
	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV1024_gc | TCA_SPLIT_ENABLE_bm;
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	ba e0       	ldi	r27, 0x0A	; 10
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	8c 93       	st	X, r24
	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	13 96       	adiw	r26, 0x03	; 3
 132:	9c 93       	st	X, r25
 134:	13 97       	sbiw	r26, 0x03	; 3
	

	ADC0.CTRLA |= ADC_RESSEL_10BIT_gc;			// 10 bit mode
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f6 e0       	ldi	r31, 0x06	; 6
 13a:	80 81       	ld	r24, Z
 13c:	80 83       	st	Z, r24
	ADC0.CTRLA &= ~ADC_FREERUN_bm;				// Disable Free Running (Enable Single Mode)
 13e:	80 81       	ld	r24, Z
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	80 83       	st	Z, r24
	ADC0.CTRLA |= ADC_ENABLE_bm;				// Enable the ADC
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
	ADC0.MUXPOS = ADC_MUXPOS_AIN7_gc;			// Switch to Input 7
 14a:	87 e0       	ldi	r24, 0x07	; 7
 14c:	86 83       	std	Z+6, r24	; 0x06
	ADC0.DBGCTRL |= ADC_DBGRUN_bm;				// Enable Debugging 
 14e:	84 85       	ldd	r24, Z+12	; 0x0c
 150:	81 60       	ori	r24, 0x01	; 1
 152:	84 87       	std	Z+12, r24	; 0x0c
	
	ADC0.INTCTRL |= ADC_RESRDY_bm;				// Enable Single Conversion ISR
 154:	82 85       	ldd	r24, Z+10	; 0x0a
 156:	81 60       	ori	r24, 0x01	; 1
 158:	82 87       	std	Z+10, r24	; 0x0a
	
	ADC0.WINLT = threshold;						// Set threshold (for future use)
 15a:	29 e1       	ldi	r18, 0x19	; 25
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	22 8b       	std	Z+18, r18	; 0x12
 160:	33 8b       	std	Z+19, r19	; 0x13
	ADC0.COMMAND = ADC_STCONV_bm;				// Start the conversion
 162:	90 87       	std	Z+8, r25	; 0x08

	// Start T1 timer
	TCA0.SPLIT.HCNT = T1;
 164:	83 e1       	ldi	r24, 0x13	; 19
 166:	91 96       	adiw	r26, 0x21	; 33
 168:	8c 93       	st	X, r24
 16a:	91 97       	sbiw	r26, 0x21	; 33
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
 16c:	1a 96       	adiw	r26, 0x0a	; 10
 16e:	8c 91       	ld	r24, X
 170:	1a 97       	sbiw	r26, 0x0a	; 10
 172:	82 60       	ori	r24, 0x02	; 2
 174:	1a 96       	adiw	r26, 0x0a	; 10
 176:	8c 93       	st	X, r24
	sei();
 178:	78 94       	sei

	while (1) {
		if (y == 0 && x == 0 && started)		// Might need a small threshold for real world scenario
 17a:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <y>
 17e:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <y+0x1>
 182:	a0 91 08 28 	lds	r26, 0x2808	; 0x802808 <y+0x2>
 186:	b0 91 09 28 	lds	r27, 0x2809	; 0x802809 <y+0x3>
 18a:	89 2b       	or	r24, r25
 18c:	8a 2b       	or	r24, r26
 18e:	8b 2b       	or	r24, r27
 190:	99 f4       	brne	.+38     	; 0x1b8 <main+0xac>
 192:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <x>
 196:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <x+0x1>
 19a:	a0 91 0c 28 	lds	r26, 0x280C	; 0x80280c <x+0x2>
 19e:	b0 91 0d 28 	lds	r27, 0x280D	; 0x80280d <x+0x3>
 1a2:	89 2b       	or	r24, r25
 1a4:	8a 2b       	or	r24, r26
 1a6:	8b 2b       	or	r24, r27
 1a8:	39 f4       	brne	.+14     	; 0x1b8 <main+0xac>
 1aa:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <started>
 1ae:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <started+0x1>
 1b2:	89 2b       	or	r24, r25
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <main+0xac>
 1b6:	76 c0       	rjmp	.+236    	; 0x2a4 <main+0x198>
			break;
			
		if(	ADC0.MUXPOS == ADC_MUXPOS_AIN6_gc) {// Device moves while in front sensor mode
 1b8:	80 91 06 06 	lds	r24, 0x0606	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
 1bc:	86 30       	cpi	r24, 0x06	; 6
 1be:	e9 f6       	brne	.-70     	; 0x17a <main+0x6e>
			cli();								// Disable interrupts to avoid race conditions (e.g. turning left while inside switch statement)
 1c0:	f8 94       	cli
			if(started == 0) started = 1;
 1c2:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <started>
 1c6:	90 91 03 28 	lds	r25, 0x2803	; 0x802803 <started+0x1>
 1ca:	89 2b       	or	r24, r25
 1cc:	31 f4       	brne	.+12     	; 0x1da <main+0xce>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <started>
 1d6:	90 93 03 28 	sts	0x2803, r25	; 0x802803 <started+0x1>
			
			PORTD.OUT = 0b00000101;				// Enable Front LED's
 1da:	85 e0       	ldi	r24, 0x05	; 5
 1dc:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
			switch (current_dir) {				// Increment coordinates
 1e0:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <current_dir>
 1e4:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <current_dir+0x1>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 05       	cpc	r25, r1
 1ec:	f1 f0       	breq	.+60     	; 0x22a <main+0x11e>
 1ee:	1c f4       	brge	.+6      	; 0x1f6 <main+0xea>
 1f0:	89 2b       	or	r24, r25
 1f2:	39 f0       	breq	.+14     	; 0x202 <main+0xf6>
 1f4:	55 c0       	rjmp	.+170    	; 0x2a0 <main+0x194>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	91 05       	cpc	r25, r1
 1fa:	59 f1       	breq	.+86     	; 0x252 <main+0x146>
 1fc:	03 97       	sbiw	r24, 0x03	; 3
 1fe:	e9 f1       	breq	.+122    	; 0x27a <main+0x16e>
 200:	4f c0       	rjmp	.+158    	; 0x2a0 <main+0x194>
				case 0: y++; break;
 202:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <y>
 206:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <y+0x1>
 20a:	a0 91 08 28 	lds	r26, 0x2808	; 0x802808 <y+0x2>
 20e:	b0 91 09 28 	lds	r27, 0x2809	; 0x802809 <y+0x3>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	a1 1d       	adc	r26, r1
 216:	b1 1d       	adc	r27, r1
 218:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <y>
 21c:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <y+0x1>
 220:	a0 93 08 28 	sts	0x2808, r26	; 0x802808 <y+0x2>
 224:	b0 93 09 28 	sts	0x2809, r27	; 0x802809 <y+0x3>
 228:	3b c0       	rjmp	.+118    	; 0x2a0 <main+0x194>
				case 1: x--; break;
 22a:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <x>
 22e:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <x+0x1>
 232:	a0 91 0c 28 	lds	r26, 0x280C	; 0x80280c <x+0x2>
 236:	b0 91 0d 28 	lds	r27, 0x280D	; 0x80280d <x+0x3>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	a1 09       	sbc	r26, r1
 23e:	b1 09       	sbc	r27, r1
 240:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <x>
 244:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <x+0x1>
 248:	a0 93 0c 28 	sts	0x280C, r26	; 0x80280c <x+0x2>
 24c:	b0 93 0d 28 	sts	0x280D, r27	; 0x80280d <x+0x3>
 250:	27 c0       	rjmp	.+78     	; 0x2a0 <main+0x194>
				case 2: y--; break;
 252:	80 91 06 28 	lds	r24, 0x2806	; 0x802806 <y>
 256:	90 91 07 28 	lds	r25, 0x2807	; 0x802807 <y+0x1>
 25a:	a0 91 08 28 	lds	r26, 0x2808	; 0x802808 <y+0x2>
 25e:	b0 91 09 28 	lds	r27, 0x2809	; 0x802809 <y+0x3>
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	a1 09       	sbc	r26, r1
 266:	b1 09       	sbc	r27, r1
 268:	80 93 06 28 	sts	0x2806, r24	; 0x802806 <y>
 26c:	90 93 07 28 	sts	0x2807, r25	; 0x802807 <y+0x1>
 270:	a0 93 08 28 	sts	0x2808, r26	; 0x802808 <y+0x2>
 274:	b0 93 09 28 	sts	0x2809, r27	; 0x802809 <y+0x3>
 278:	13 c0       	rjmp	.+38     	; 0x2a0 <main+0x194>
				case 3: x++; break;
 27a:	80 91 0a 28 	lds	r24, 0x280A	; 0x80280a <x>
 27e:	90 91 0b 28 	lds	r25, 0x280B	; 0x80280b <x+0x1>
 282:	a0 91 0c 28 	lds	r26, 0x280C	; 0x80280c <x+0x2>
 286:	b0 91 0d 28 	lds	r27, 0x280D	; 0x80280d <x+0x3>
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	a1 1d       	adc	r26, r1
 28e:	b1 1d       	adc	r27, r1
 290:	80 93 0a 28 	sts	0x280A, r24	; 0x80280a <x>
 294:	90 93 0b 28 	sts	0x280B, r25	; 0x80280b <x+0x1>
 298:	a0 93 0c 28 	sts	0x280C, r26	; 0x80280c <x+0x2>
 29c:	b0 93 0d 28 	sts	0x280D, r27	; 0x80280d <x+0x3>
			}
			sei();								// Re enable Interrupts after incrementing coordinates
 2a0:	78 94       	sei
 2a2:	6b cf       	rjmp	.-298    	; 0x17a <main+0x6e>
		}
	}
	PORTD.OUT = 0b00000111;						// Turn off the lights
 2a4:	87 e0       	ldi	r24, 0x07	; 7
 2a6:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7f4464>
	ADC0.CTRLA &= ~ADC_ENABLE_bm;				// Disable ADC
 2aa:	e0 e0       	ldi	r30, 0x00	; 0
 2ac:	f6 e0       	ldi	r31, 0x06	; 6
 2ae:	80 81       	ld	r24, Z
 2b0:	8e 7f       	andi	r24, 0xFE	; 254
 2b2:	80 83       	st	Z, r24
	cli();
 2b4:	f8 94       	cli
}
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret

000002bc <__vector_22>:

// Right turn (left when returning)
ISR(ADC0_RESRDY_vect) {
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	if (ADC0.RES > threshold) {					// if there isn't a wall on the left/right (returning/not), turn
 2de:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
 2e2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
 2e6:	4a 97       	sbiw	r24, 0x1a	; 26
 2e8:	58 f0       	brcs	.+22     	; 0x300 <__vector_22+0x44>
		if (returning)			
 2ea:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2ee:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 2f2:	89 2b       	or	r24, r25
 2f4:	19 f0       	breq	.+6      	; 0x2fc <__vector_22+0x40>
			turn_left();
 2f6:	0e 94 5c 00 	call	0xb8	; 0xb8 <turn_left>
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <__vector_22+0x44>
		else
			turn_right();
 2fc:	0e 94 71 00 	call	0xe2	; 0xe2 <turn_right>
	}
	
	ADC0.INTFLAGS = ADC_RESRDY_bm;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_23>:

// Left turn (right when returning)
ISR(ADC0_WCOMP_vect) {							// if this triggers it means there's a wall in front, so turn
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	if (returning)
 34a:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 34e:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 352:	89 2b       	or	r24, r25
 354:	19 f0       	breq	.+6      	; 0x35c <__vector_23+0x34>
		turn_right();
 356:	0e 94 71 00 	call	0xe2	; 0xe2 <turn_right>
 35a:	02 c0       	rjmp	.+4      	; 0x360 <__vector_23+0x38>
	else
		turn_left();
 35c:	0e 94 5c 00 	call	0xb8	; 0xb8 <turn_left>
	
	ADC0.INTFLAGS = ADC_WCMP_bm;
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <__vector_29>:

// Button pressed
ISR(PORTF_PORT_vect) {
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	PORTD.OUTCLR = 0b00000111;					// turn on all the LEDs
 39a:	87 e0       	ldi	r24, 0x07	; 7
 39c:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <__TEXT_REGION_LENGTH__+0x7f4466>
	returning = 1;								// Toggle returning
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 3a8:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	current_dir = (current_dir + 2) % 4;		// Turn Around
 3ac:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <current_dir>
 3b0:	90 91 05 28 	lds	r25, 0x2805	; 0x802805 <current_dir+0x1>
 3b4:	02 96       	adiw	r24, 0x02	; 2
 3b6:	83 70       	andi	r24, 0x03	; 3
 3b8:	90 78       	andi	r25, 0x80	; 128
 3ba:	99 23       	and	r25, r25
 3bc:	24 f4       	brge	.+8      	; 0x3c6 <__vector_29+0x3e>
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	8c 6f       	ori	r24, 0xFC	; 252
 3c2:	9f 6f       	ori	r25, 0xFF	; 255
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <current_dir>
 3ca:	90 93 05 28 	sts	0x2805, r25	; 0x802805 <current_dir+0x1>
	
	
	TCA0.SPLIT.LCNT = T3;						// Start timer for LED lights		
 3ce:	e0 e0       	ldi	r30, 0x00	; 0
 3d0:	fa e0       	ldi	r31, 0x0A	; 10
 3d2:	8a e3       	ldi	r24, 0x3A	; 58
 3d4:	80 a3       	std	Z+32, r24	; 0x20
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_LUNF_bm;	
 3d6:	83 85       	ldd	r24, Z+11	; 0x0b
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	83 87       	std	Z+11, r24	; 0x0b
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_LUNF_bm;
 3dc:	82 85       	ldd	r24, Z+10	; 0x0a
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	82 87       	std	Z+10, r24	; 0x0a
	
	PORTF.INTFLAGS |= PORT_INT5_bm;
 3e2:	e0 ea       	ldi	r30, 0xA0	; 160
 3e4:	f4 e0       	ldi	r31, 0x04	; 4
 3e6:	81 85       	ldd	r24, Z+9	; 0x09
 3e8:	80 62       	ori	r24, 0x20	; 32
 3ea:	81 87       	std	Z+9, r24	; 0x09
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__vector_8>:

ISR(TCA0_HUNF_vect) {
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	8f 93       	push	r24
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	ADC0.INTCTRL &= ~ADC_RESRDY_bm;				// Disable RESRDY ISR
 40e:	e0 e0       	ldi	r30, 0x00	; 0
 410:	f6 e0       	ldi	r31, 0x06	; 6
 412:	82 85       	ldd	r24, Z+10	; 0x0a
 414:	8e 7f       	andi	r24, 0xFE	; 254
 416:	82 87       	std	Z+10, r24	; 0x0a
	
	ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;			// Switch to front sensor
 418:	86 e0       	ldi	r24, 0x06	; 6
 41a:	86 83       	std	Z+6, r24	; 0x06
		
	ADC0.CTRLA |= ADC_FREERUN_bm;				// Enable Free Running Mode
 41c:	80 81       	ld	r24, Z
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 83       	st	Z, r24
	ADC0.INTCTRL |= ADC_WCMP_bm;				// Enable WCMP ISR
 422:	82 85       	ldd	r24, Z+10	; 0x0a
 424:	82 60       	ori	r24, 0x02	; 2
 426:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE |= ADC_WINCM0_bm;				// Tells the ADC to use WCMP Mode
 428:	84 81       	ldd	r24, Z+4	; 0x04
 42a:	81 60       	ori	r24, 0x01	; 1
 42c:	84 83       	std	Z+4, r24	; 0x04
	
	ADC0.COMMAND |= ADC_STCONV_bm;				// Start Converting
 42e:	80 85       	ldd	r24, Z+8	; 0x08
 430:	81 60       	ori	r24, 0x01	; 1
 432:	80 87       	std	Z+8, r24	; 0x08
		
	TCA0.SPLIT.LCNT = T2;						// Start T2
 434:	e0 e0       	ldi	r30, 0x00	; 0
 436:	fa e0       	ldi	r31, 0x0A	; 10
 438:	87 e2       	ldi	r24, 0x27	; 39
 43a:	80 a3       	std	Z+32, r24	; 0x20
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_LUNF_bm;
 43c:	83 85       	ldd	r24, Z+11	; 0x0b
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	83 87       	std	Z+11, r24	; 0x0b
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_LUNF_bm;
 442:	82 85       	ldd	r24, Z+10	; 0x0a
 444:	81 60       	ori	r24, 0x01	; 1
 446:	82 87       	std	Z+10, r24	; 0x0a
	
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_HUNF_bm;
 448:	83 85       	ldd	r24, Z+11	; 0x0b
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	83 87       	std	Z+11, r24	; 0x0b
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	8f 91       	pop	r24
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_7>:

ISR(TCA0_LUNF_vect) {
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
 46a:	9f 93       	push	r25
 46c:	af 93       	push	r26
 46e:	bf 93       	push	r27
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
	//switch to side sensor
	if(!returning)
 474:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 478:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 47c:	89 2b       	or	r24, r25
 47e:	21 f4       	brne	.+8      	; 0x488 <__vector_7+0x2a>
		ADC0.MUXPOS = ADC_MUXPOS_AIN7_gc;		// IN 7 = right sensor
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
 486:	03 c0       	rjmp	.+6      	; 0x48e <__vector_7+0x30>
	else
		ADC0.MUXPOS = ADC_MUXPOS_AIN5_gc;		// IN 5 = left sensor
 488:	85 e0       	ldi	r24, 0x05	; 5
 48a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7f4606>
		
	ADC0.CTRLA &= ~ADC_FREERUN_bm;				// Disable Free Running Mode (Enable Single Conversion)
 48e:	e0 e0       	ldi	r30, 0x00	; 0
 490:	f6 e0       	ldi	r31, 0x06	; 6
 492:	80 81       	ld	r24, Z
 494:	8d 7f       	andi	r24, 0xFD	; 253
 496:	80 83       	st	Z, r24
	ADC0.INTCTRL |= ADC_RESRDY_bm;				// Enable RESRDY ISR (side sensor ISR)
 498:	82 85       	ldd	r24, Z+10	; 0x0a
 49a:	81 60       	ori	r24, 0x01	; 1
 49c:	82 87       	std	Z+10, r24	; 0x0a
	
	ADC0.INTCTRL &= ~ADC_WCMP_bm;				// Disable WCMP Interrupt
 49e:	82 85       	ldd	r24, Z+10	; 0x0a
 4a0:	8d 7f       	andi	r24, 0xFD	; 253
 4a2:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLE &= ~ADC_WINCM0_bm;				// Disable Window Comparator Mode
 4a4:	84 81       	ldd	r24, Z+4	; 0x04
 4a6:	8e 7f       	andi	r24, 0xFE	; 254
 4a8:	84 83       	std	Z+4, r24	; 0x04

	PORTD.OUT |= 0b00000111;					// Turn OFF LED's
 4aa:	a0 e6       	ldi	r26, 0x60	; 96
 4ac:	b4 e0       	ldi	r27, 0x04	; 4
 4ae:	14 96       	adiw	r26, 0x04	; 4
 4b0:	8c 91       	ld	r24, X
 4b2:	14 97       	sbiw	r26, 0x04	; 4
 4b4:	87 60       	ori	r24, 0x07	; 7
 4b6:	14 96       	adiw	r26, 0x04	; 4
 4b8:	8c 93       	st	X, r24
	
	ADC0.COMMAND = ADC_STCONV_bm;				// Start Conversion
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	80 87       	std	Z+8, r24	; 0x08
	
	TCA0.SPLIT.HCNT = T1;						// Start T1
 4be:	e0 e0       	ldi	r30, 0x00	; 0
 4c0:	fa e0       	ldi	r31, 0x0A	; 10
 4c2:	83 e1       	ldi	r24, 0x13	; 19
 4c4:	81 a3       	std	Z+33, r24	; 0x21
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_HUNF_bm;
 4c6:	83 85       	ldd	r24, Z+11	; 0x0b
 4c8:	82 60       	ori	r24, 0x02	; 2
 4ca:	83 87       	std	Z+11, r24	; 0x0b
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
 4cc:	82 85       	ldd	r24, Z+10	; 0x0a
 4ce:	82 60       	ori	r24, 0x02	; 2
 4d0:	82 87       	std	Z+10, r24	; 0x0a
	
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_LUNF_bm;	// Clear Flags
 4d2:	83 85       	ldd	r24, Z+11	; 0x0b
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	83 87       	std	Z+11, r24	; 0x0b
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
