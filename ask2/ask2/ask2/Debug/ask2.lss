
ask2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00802800  00802800  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bc4  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021ff  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036e  00000000  00000000  000050df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00005450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000142e  00000000  00000000  000054fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  0000692a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00006a39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_7>
  20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_8>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_29>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a2 30       	cpi	r26, 0x02	; 2
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  b0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <main>:
T2 -> BUTTON TIMER
T3 -> BUTTON REACTIVATION TIMER
*/

int main() {
	PORTD.DIR |= 0b00000111; //PIN 0-2 is output
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
	
	//init LED (assume cars have priority)
	PORTD.OUTCLR = 0b00000001;
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	96 83       	std	Z+6, r25	; 0x06
	PORTD.OUT |= 0b00000110;
  c6:	84 81       	ldd	r24, Z+4	; 0x04
  c8:	86 60       	ori	r24, 0x06	; 6
  ca:	84 83       	std	Z+4, r24	; 0x04
	
	// pullup enable and Interrupt enabled with sense on rising edge (button release)
	PORTF.PIN5CTRL |= PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
  cc:	e0 ea       	ldi	r30, 0xA0	; 160
  ce:	f4 e0       	ldi	r31, 0x04	; 4
  d0:	85 89       	ldd	r24, Z+21	; 0x15
  d2:	8a 60       	ori	r24, 0x0A	; 10
  d4:	85 8b       	std	Z+21, r24	; 0x15

	// split timer with prescaler 1024
	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV1024_gc | TCA_SPLIT_ENABLE_bm;
  d6:	e0 e0       	ldi	r30, 0x00	; 0
  d8:	fa e0       	ldi	r31, 0x0A	; 10
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	80 83       	st	Z, r24
	TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
  de:	93 83       	std	Z+3, r25	; 0x03

	// HIGH = BUTTON / REACTIVATION TIMER
	// LOW =  TRAM TIMER
	TCA0.SPLIT.LCNT = T2;
  e0:	80 e8       	ldi	r24, 0x80	; 128
  e2:	80 a3       	std	Z+32, r24	; 0x20
	TCA0.SPLIT.HCNT = T1;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	81 a3       	std	Z+33, r24	; 0x21
	
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;	//Interrupt Enable for tram
  e8:	82 85       	ldd	r24, Z+10	; 0x0a
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	82 87       	std	Z+10, r24	; 0x0a
	
	sei();										//begin accepting interrupt signals
  ee:	78 94       	sei
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <main+0x38>

000000f2 <__vector_29>:
		;										//similar to a nop function
	}
}

// button pressed
ISR(PORTF_PORT_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	ef 93       	push	r30
 100:	ff 93       	push	r31
	PORTD.OUT |= 0b00000001;					//turn car led OFF (red light)
 102:	e0 e6       	ldi	r30, 0x60	; 96
 104:	f4 e0       	ldi	r31, 0x04	; 4
 106:	84 81       	ldd	r24, Z+4	; 0x04
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUTCLR = 0b00000100;					//turn pedestrian led ON (green light)
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	86 83       	std	Z+6, r24	; 0x06
	
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_LUNF_bm;	//clear flags
 110:	e0 e0       	ldi	r30, 0x00	; 0
 112:	fa e0       	ldi	r31, 0x0A	; 10
 114:	83 85       	ldd	r24, Z+11	; 0x0b
 116:	81 60       	ori	r24, 0x01	; 1
 118:	83 87       	std	Z+11, r24	; 0x0b
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_LUNF_bm ;	//enable timer for lights
 11a:	82 85       	ldd	r24, Z+10	; 0x0a
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	82 87       	std	Z+10, r24	; 0x0a
	
	
	PORTF.INTFLAGS |= PORT_INT5_bm;				//clear the interrupt flag
 120:	e0 ea       	ldi	r30, 0xA0	; 160
 122:	f4 e0       	ldi	r31, 0x04	; 4
 124:	81 85       	ldd	r24, Z+9	; 0x09
 126:	80 62       	ori	r24, 0x20	; 32
 128:	81 87       	std	Z+9, r24	; 0x09
	PORTF.PIN5CTRL = PORT_ISC_INTDISABLE_gc;	//disable button interrupt
 12a:	15 8a       	std	Z+21, r1	; 0x15
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_8>:

ISR(TCA0_HUNF_vect){
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	PORTD.OUT |= 0b00000001;					//turn car led OFF (red light)
 14c:	e0 e6       	ldi	r30, 0x60	; 96
 14e:	f4 e0       	ldi	r31, 0x04	; 4
 150:	84 81       	ldd	r24, Z+4	; 0x04
 152:	81 60       	ori	r24, 0x01	; 1
 154:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUTCLR = 0b00000110;					//turn pedestrian/tram led ON (green light)
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	86 83       	std	Z+6, r24	; 0x06
	
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_LUNF_bm;	//clear flags
 15a:	e0 e0       	ldi	r30, 0x00	; 0
 15c:	fa e0       	ldi	r31, 0x0A	; 10
 15e:	83 85       	ldd	r24, Z+11	; 0x0b
 160:	81 60       	ori	r24, 0x01	; 1
 162:	83 87       	std	Z+11, r24	; 0x0b
	TCA0.SPLIT.INTCTRL |= TCA_SPLIT_LUNF_bm ;	//enable timer for lights
 164:	82 85       	ldd	r24, Z+10	; 0x0a
 166:	81 60       	ori	r24, 0x01	; 1
 168:	82 87       	std	Z+10, r24	; 0x0a

	
	PORTF.PIN5CTRL = PORT_ISC_INTDISABLE_gc;	//disable button interrupt
 16a:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <__TEXT_REGION_LENGTH__+0x7f44b5>
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_HUNF_bm;	//clear flags
 16e:	83 85       	ldd	r24, Z+11	; 0x0b
 170:	82 60       	ori	r24, 0x02	; 2
 172:	83 87       	std	Z+11, r24	; 0x0b
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_7>:

//pedestrian walk time ran out OR button timer ran out
ISR(TCA0_LUNF_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	if(state == 0) {
 196:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 19a:	90 91 01 28 	lds	r25, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	89 f4       	brne	.+34     	; 0x1c4 <__vector_7+0x40>
		PORTD.OUT |= 0b00000110;					//turn pedestrian / tram led OFF (red light)
 1a2:	e0 e6       	ldi	r30, 0x60	; 96
 1a4:	f4 e0       	ldi	r31, 0x04	; 4
 1a6:	84 81       	ldd	r24, Z+4	; 0x04
 1a8:	86 60       	ori	r24, 0x06	; 6
 1aa:	84 83       	std	Z+4, r24	; 0x04
		PORTD.OUTCLR = 0b00000001;					//turn car led ON (green light)
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	86 83       	std	Z+6, r24	; 0x06
		
		TCA0.SPLIT.LCNT = T3;						//start timer for 3
 1b0:	80 e2       	ldi	r24, 0x20	; 32
 1b2:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <__TEXT_REGION_LENGTH__+0x7f4a20>
		state = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 1be:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <__vector_7+0x5c>
	}
	else if(state == 1) {
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	61 f4       	brne	.+24     	; 0x1e0 <__vector_7+0x5c>
		PORTF.PIN5CTRL = PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;		//enable button
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <__TEXT_REGION_LENGTH__+0x7f44b5>
		TCA0.SPLIT.INTCTRL &= ~TCA_SPLIT_LCMP0_bm;					//disable timer
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	fa e0       	ldi	r31, 0x0A	; 10
 1d2:	82 85       	ldd	r24, Z+10	; 0x0a
 1d4:	8f 7e       	andi	r24, 0xEF	; 239
 1d6:	82 87       	std	Z+10, r24	; 0x0a
		state = 0;
 1d8:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 1dc:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
	}
	TCA0.SPLIT.INTFLAGS |= TCA_SPLIT_LUNF_bm;						//clear flags
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	83 85       	ldd	r24, Z+11	; 0x0b
 1e6:	81 60       	ori	r24, 0x01	; 1
 1e8:	83 87       	std	Z+11, r24	; 0x0b
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
